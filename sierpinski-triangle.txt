//#define SHOW_TRIANGLE_ORIENTATION 1

texture tex : WAVEFORMDATA;

sampler sTex = sampler_state {
    Texture = (tex);
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    
    AddressU = Clamp;
};

struct VS_IN {
    float2 pos : POSITION;
    float2 tc : TEXCOORD0;
};

struct PS_IN {
    float4 pos : SV_POSITION;
    float2 tc : TEXCOORD0;
};


float4 backgroundColor : BACKGROUNDCOLOR;
float4 highlightColor  : HIGHLIGHTCOLOR;
float4 selectionColor  : SELECTIONCOLOR;
float4 textColor       : TEXTCOLOR;
float cursorPos        : CURSORPOSITION;
bool cursorVisible     : CURSORVISIBLE;
float seekPos          : SEEKPOSITION;
bool seeking           : SEEKING;
float4 replayGain      : REPLAYGAIN; // album gain, track gain, album peak, track peak
float2 viewportSize    : VIEWPORTSIZE;
bool horizontal        : ORIENTATION;
bool flipped           : FLIPPED;
bool shade_played      : SHADEPLAYED;
float elapsedTime : TRACKTIME;
float totalTime : TRACKDURATION;

PS_IN VS( VS_IN input ) {
    PS_IN output = (PS_IN)0;

    float2 half_pixel = float2(1,-1) / viewportSize;
    output.pos = float4(input.pos - half_pixel, 0, 1);

    float aspectRatio = viewportSize.x / viewportSize.y;

    if (horizontal) {
        output.tc = float2(input.tc.x * aspectRatio, input.tc.y);
    } else {
        output.tc = float2(-input.tc.x, input.tc.y / aspectRatio);
    }

    if (flipped)
        output.tc.x = 1.0 - output.tc.x;

    return output;
}

float3 swizzle1(float3 p) {
    return float3(p.x, p.z, p.y);
}

float3 swizzle2(float3 p) {
    return float3(p.x, p.y, p.z);
}

float3 swizzle3(float3 p) {
    return float3(p.z, p.y, p.x);
}

float4 sierpinskiTriangle0(float2 interval, float3 distToSides, float3 heights, float thresholdWidth, float4 outsideColor) {
    float3 insideHalfplanes = saturate((distToSides / thresholdWidth) + 0.5);
    float inside = insideHalfplanes.x * insideHalfplanes.y * insideHalfplanes.z;
    float played = saturate((cursorPos - interval.x) / interval.y);
    float4 insideColor = lerp(textColor, selectionColor, played);
#if SHOW_TRIANGLE_ORIENTATION
    float3 near = saturate(((distToSides - heights / 2) / thresholdWidth) + 0.5);
    inside *= (2 - near.x + near.y - 2 * near.z)/3.0;
#endif
    return lerp(outsideColor, insideColor, inside);
}

float4 sierpinskiTriangle1(float2 interval, float3 distToSides, float3 heights, float thresholdWidth, float4 outsideColor) {
    float3 halfHeights = heights / 2;
    float4 color = outsideColor;
    float partLength = interval.y / 3.0;
    color = sierpinskiTriangle0(float2(interval.x + 0 * partLength, partLength), swizzle1(float3(distToSides.x - halfHeights.x, distToSides.y, distToSides.z)), swizzle1(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle0(float2(interval.x + 2 * partLength, partLength), swizzle3(float3(distToSides.x, distToSides.y - halfHeights.y, distToSides.z)), swizzle3(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle0(float2(interval.x + 1 * partLength, partLength), swizzle2(float3(distToSides.x, distToSides.y, distToSides.z - halfHeights.z)), swizzle2(halfHeights), thresholdWidth, color);
    return color;
}

float4 sierpinskiTriangle2(float2 interval, float3 distToSides, float3 heights, float thresholdWidth, float4 outsideColor) {
    float3 halfHeights = heights / 2;
    float4 color = outsideColor;
    float partLength = interval.y / 3.0;
    color = sierpinskiTriangle1(float2(interval.x + 0 * partLength, partLength), swizzle1(float3(distToSides.x - halfHeights.x, distToSides.y, distToSides.z)), swizzle1(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle1(float2(interval.x + 2 * partLength, partLength), swizzle3(float3(distToSides.x, distToSides.y - halfHeights.y, distToSides.z)), swizzle3(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle1(float2(interval.x + 1 * partLength, partLength), swizzle2(float3(distToSides.x, distToSides.y, distToSides.z - halfHeights.z)), swizzle2(halfHeights), thresholdWidth, color);
    return color;
}

float4 sierpinskiTriangle3(float2 interval, float3 distToSides, float3 heights, float thresholdWidth, float4 outsideColor) {
    float3 halfHeights = heights / 2;
    float4 color = outsideColor;
    float partLength = interval.y / 3.0;
    color = sierpinskiTriangle2(float2(interval.x + 0 * partLength, partLength), swizzle1(float3(distToSides.x - halfHeights.x, distToSides.y, distToSides.z)), swizzle1(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle2(float2(interval.x + 2 * partLength, partLength), swizzle3(float3(distToSides.x, distToSides.y - halfHeights.y, distToSides.z)), swizzle3(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle2(float2(interval.x + 1 * partLength, partLength), swizzle2(float3(distToSides.x, distToSides.y, distToSides.z - halfHeights.z)), swizzle2(halfHeights), thresholdWidth, color);
    return color;
}

float4 sierpinskiTriangle4(float2 interval, float3 distToSides, float3 heights, float thresholdWidth, float4 outsideColor) {
    float3 halfHeights = heights / 2;
    float4 color = outsideColor;
    float partLength = interval.y / 3.0;
    color = sierpinskiTriangle3(float2(interval.x + 0 * partLength, partLength), swizzle1(float3(distToSides.x - halfHeights.x, distToSides.y, distToSides.z)), swizzle1(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle3(float2(interval.x + 2 * partLength, partLength), swizzle3(float3(distToSides.x, distToSides.y - halfHeights.y, distToSides.z)), swizzle3(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle3(float2(interval.x + 1 * partLength, partLength), swizzle2(float3(distToSides.x, distToSides.y, distToSides.z - halfHeights.z)), swizzle2(halfHeights), thresholdWidth, color);
    return color;
}

float4 sierpinskiTriangle5(float2 interval, float3 distToSides, float3 heights, float thresholdWidth, float4 outsideColor) {
    float3 halfHeights = heights / 2;
    float4 color = outsideColor;
    float partLength = interval.y / 3.0;
    color = sierpinskiTriangle4(float2(interval.x + 0 * partLength, partLength), swizzle1(float3(distToSides.x - halfHeights.x, distToSides.y, distToSides.z)), swizzle1(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle4(float2(interval.x + 2 * partLength, partLength), swizzle3(float3(distToSides.x, distToSides.y - halfHeights.y, distToSides.z)), swizzle3(halfHeights), thresholdWidth, color);
    color = sierpinskiTriangle4(float2(interval.x + 1 * partLength, partLength), swizzle2(float3(distToSides.x, distToSides.y, distToSides.z - halfHeights.z)), swizzle2(halfHeights), thresholdWidth, color);
    return color;
}

float2 edgeNormal(float2 edgeStart, float2 edgeEnd, float2 oppositeVertex) {
    float2 direction = normalize(edgeEnd - edgeStart);
    float2 offset = oppositeVertex - edgeStart;
    float2 parallelOffset = dot(offset, direction) * direction;
    float2 orthogonalOffset = offset - parallelOffset;
    return normalize(orthogonalOffset);
}

float distPointToLine(float2 x, float2 p, float2 n) {
    return dot(x - p, n);
}

float2 distort(float2 p) {
    float f = 1 - 0.5 * exp(-dot(p, p));
    return p*f;
}

float4 PS( PS_IN input ) : SV_Target
{
    float dx=1/viewportSize.x;
    float dy = 1/viewportSize.y;

    float aspectRatio = viewportSize.x / viewportSize.y;

    float borderWidth = 2.0*dy;

    float height = 1 + sqrt(3)/2;
    float margin = (2 - height) / 2;

    float2 a = float2(-1, -1 + margin);
    float2 b = float2(1, -1 + margin);
    float2 c = float2(0, 1 - margin);

    float2 x = input.tc;
    if (shade_played) {
        float2 center = {(cursorPos * 2 - 1) * aspectRatio, 0};
        x = distort(x - center) + center;
    }
    x = (x + 1) / 2;
    x = x - floor(x);
    x = x * 2 - 1;
    x = x / 0.8;

    // Normal vectors of edges pointing towards opposite vertex
    float2 nab = edgeNormal(a, b, c);
    float2 nbc = edgeNormal(b, c, a);
    float2 nca = edgeNormal(c, a, b);

    // Heights of triangle
    float ha = distPointToLine(a, b, nbc);
    float hb = distPointToLine(b, c, nca);
    float hc = distPointToLine(c, a, nab);
    float3 hs = float3(ha, hb, hc);

    // Signed distances of point to triangle edges
    float da = distPointToLine(x, b, nbc);
    float db = distPointToLine(x, c, nca);
    float dc = distPointToLine(x, a, nab);
    float3 ds = float3(da, db, dc);

    float4 c0 = backgroundColor;

    // 0 - 4
    c0 = sierpinskiTriangle4(float2(0, 1), ds, hs, borderWidth, c0);

    return c0;
}

technique Render9 {
    pass {
        VertexShader = compile vs_3_0 VS();
        PixelShader = compile ps_3_0 PS();
    }
}