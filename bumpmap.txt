texture tex : WAVEFORMDATA;

sampler sTex = sampler_state
{
	Texture = (tex);
	MipFilter = LINEAR;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	
	AddressU = Clamp;
};

struct VS_IN
{
	float2 pos : POSITION;
	float2 tc : TEXCOORD0;
};

struct PS_IN
{
	float4 pos : SV_POSITION;
	float2 tc : TEXCOORD0;
};


float4 backgroundColor : BACKGROUNDCOLOR;
float4 highlightColor  : HIGHLIGHTCOLOR;
float4 selectionColor  : SELECTIONCOLOR;
float4 textColor       : TEXTCOLOR;
float cursorPos        : CURSORPOSITION;
bool cursorVisible     : CURSORVISIBLE;
float seekPos          : SEEKPOSITION;
bool seeking           : SEEKING;
float4 replayGain      : REPLAYGAIN; // album gain, track gain, album peak, track peak
float2 viewportSize    : VIEWPORTSIZE;
bool horizontal        : ORIENTATION;
bool flipped           : FLIPPED;
bool shade_played      : SHADEPLAYED;
float elapsedTime : TRACKTIME;
float totalTime : TRACKDURATION;

PS_IN VS( VS_IN input )
{
	PS_IN output = (PS_IN)0;

	float2 half_pixel = float2(1,-1) / viewportSize;
	output.pos = float4(input.pos - half_pixel, 0, 1);

	float aspectRatio = viewportSize.x / viewportSize.y;

	if (horizontal) {
		output.tc = float2(input.tc.x * aspectRatio, input.tc.y);
	} else {
		output.tc = float2(-input.tc.x, input.tc.y / aspectRatio);
	}

	if (flipped) {
		output.tc.x = 1.0 - output.tc.x;
	}

	return output;
}

float4 evaluateMinMaxRMS(float relativeTime) {
	 // alpha 1 indicates biased texture
	float4 minmaxrms = tex1D(sTex, relativeTime);
	minmaxrms.rgb -= 0.5 * minmaxrms.a;
	minmaxrms.rgb *= 1.0 + minmaxrms.a;
	return minmaxrms;
}

float evaluateHeight(float2 tc) {
	float aspectRatio = viewportSize.x / viewportSize.y;
	tc.x = (tc.x / aspectRatio + 1) / 2;
	//tc.x = tc.x * 15 / totalTime + (seeking ? seekPos : cursorPos);
	
	float4 minmaxrms = evaluateMinMaxRMS(tc.x);

	float below = tc.y - minmaxrms.r;
	float above = tc.y - minmaxrms.g;
	float factor = min(abs(below), abs(above));
        
        float dy = 3.0 / viewportSize.y;
        
        if (minmaxrms.r < minmaxrms.g) {
            float heightBelow;
            if (minmaxrms.r < -minmaxrms.b) {
                     heightBelow = smoothstep(minmaxrms.r, -minmaxrms.b, tc.y);
            } else {
                    heightBelow = saturate((tc.y + minmaxrms.b) / dy + 0.5);
            }
            float heightAbove;
            if (minmaxrms.g > minmaxrms.b) {
                    heightAbove = smoothstep(minmaxrms.g, minmaxrms.b, tc.y);
            } else {
                    heightAbove = saturate((minmaxrms.b - tc.y) / dy + 0.5);
            }
            float height = min(heightBelow, heightAbove);

            return sin(radians(90*saturate(height)));
        } else {
            return 0.0;
        }
}

float4 drawWaveform(float2 tc, float4 fg, float4 bg) {
	float height = evaluateHeight(tc);
	return	lerp(bg, fg, height);
}

float3 getWaveformNormalCoarse(float2 tc, float heightScale) {
	float height = evaluateHeight(tc) * heightScale;
	return normalize(float3(ddx(height), ddy(height), 1.0));
}

float3 getWaveformNormalFine(float2 tc, float heightScale) {
	float dx = 0.1/viewportSize.x;
	float dy = 1/viewportSize.y;
	float height = evaluateHeight(tc) * heightScale;
	float heightX = evaluateHeight(float2(tc.x + dx, tc.y)) * heightScale;
	float heightY = evaluateHeight(float2(tc.x, tc.y + dy)) * heightScale;
	return normalize(float3((height - heightX) / dx, (height - heightY) / dy, 1.0));
}

float4 drawShadedWaveform(float2 tc, float heightScale, float3 cameraPos, float3 lightPos, float4 diffuseCoeff, float4 specularCoeff, float shininess) {
	
	float3 surfacePos = float3(tc.x, tc.y, 0.0);

	float3 vNormal = getWaveformNormalFine(tc, heightScale);
	float3 vLight = normalize(lightPos - surfacePos);
	float3 vView = normalize(cameraPos - surfacePos);
	float3 vReflection = 2 * dot(vLight, vNormal) * vNormal - vLight;
	
	float kDiff = max(0, dot(vNormal, vLight));
	float kSpec = pow(max(0, dot(vReflection, vView)), shininess);
	
	float4 diffuseColor = kDiff * diffuseCoeff;
	float4 specularColor = kSpec * specularCoeff;
		
	return diffuseColor + specularColor;
}

float3 getLightPosition(float3 cameraPos, float highlightX, float highlightY, float lightDistance) {
	float aspectRatio = viewportSize.x / viewportSize.y;
	
	float3 hightlightPos = float3((highlightX * 2 - 1) * aspectRatio, highlightY, 0.0);
	float3 vNormal = float3(0.0, 0.0, 1.0);
	float3 vView = normalize(cameraPos - hightlightPos);
	float3 vReflection = 2 * dot(vView, vNormal) * vNormal - vView;

	float3 lightPos = hightlightPos + vReflection * lightDistance;

	return lightPos;
}

float4 PS( PS_IN input ) : SV_Target
{
	// fiddle with these to your hearts desire

	float cameraDistance = 1000.0;
	float waveformHeight = -0.1; // positive for raised waveform, negative for sunken waveform

	// ambient light
	float4 ambientCoeff = 0.3;

	// diffuse and specular light for cursor position
	float cursorDistance = 5.0;
	float cursorYOffset = 0.0;
	float4 cursorDiffuseCoeff = 0.7 * selectionColor;
	float4 cursorSpecularCoeff = 1.0 * selectionColor;
	float cursorShininess = 1000.0;

	// diffuse and specular light for seek position
	float seekDistance = 5.0;
	float seekYOffset = 0.0;
	float4 seekDiffuseCoeff = 0.7 * highlightColor;
	float4 seekSpecularCoeff = 1.0 * highlightColor;
	float4 seekShininess = 1000.0;
	
	// only fiddle with the rest if you know what you're doing.

	float2 tc = input.tc;
	
	float3 cameraPos = float3(0.0, 0.0, 1.0) * cameraDistance;

	float4 ambientColor = ambientCoeff * drawWaveform(tc, textColor, backgroundColor);

	float4 color = ambientColor;
	
	float dx = ddx(tc.x) / 3;
	if (true) {
		float3 lightPos = getLightPosition(cameraPos, cursorPos, cursorYOffset, cursorDistance);
		for (int n = -1; n <= 1; ++n) {
			color += 1.0/3.0*drawShadedWaveform(tc + n * float2(dx, 0.0), waveformHeight, cameraPos, lightPos, cursorDiffuseCoeff, cursorSpecularCoeff, cursorShininess);
		}
	}
	if (seeking) {
		float3 lightPos = getLightPosition(cameraPos, seekPos, seekYOffset, seekDistance);
		for (int n = -1; n <= 1; ++n) {
			color += 1.0/3.0*drawShadedWaveform(tc + n * float2(dx, 0.0), waveformHeight, cameraPos, lightPos, seekDiffuseCoeff, seekSpecularCoeff, seekShininess);
		}
	}
 
	return saturate(color);
}

technique Render9
{
	pass
	{
		VertexShader = compile vs_3_0 VS();
		PixelShader = compile ps_3_0 PS();
	}
}