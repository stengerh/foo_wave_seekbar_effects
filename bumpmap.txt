texture tex : WAVEFORMDATA;

sampler sTex = sampler_state
{
    Texture = (tex);
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    
    AddressU = Clamp;
};

struct VS_IN
{
    float2 pos : POSITION;
    float2 tc : TEXCOORD0;
};

struct PS_IN
{
    float4 pos : SV_POSITION;
    float2 tc : TEXCOORD0;
};


float4 backgroundColor : BACKGROUNDCOLOR;
float4 highlightColor  : HIGHLIGHTCOLOR;
float4 selectionColor  : SELECTIONCOLOR;
float4 textColor       : TEXTCOLOR;
float cursorPos        : CURSORPOSITION;
bool cursorVisible     : CURSORVISIBLE;
float seekPos          : SEEKPOSITION;
bool seeking           : SEEKING;
float4 replayGain      : REPLAYGAIN; // album gain, track gain, album peak, track peak
float2 viewportSize    : VIEWPORTSIZE;
bool horizontal        : ORIENTATION;
bool flipped           : FLIPPED;
bool shade_played      : SHADEPLAYED;
float elapsedTime : TRACKTIME;
float totalTime : TRACKDURATION;

PS_IN VS( VS_IN input )
{
    PS_IN output = (PS_IN)0;

    float2 half_pixel = float2(1,-1) / viewportSize;
    output.pos = float4(input.pos - half_pixel, 0, 1);

	float aspectRatio = viewportSize.x / viewportSize.y;

    if (horizontal)
    {
        output.tc = float2(input.tc.x * aspectRatio, input.tc.y);
    }
    else
    {
        output.tc = float2(-input.tc.x, input.tc.y / aspectRatio);
    }

    if (flipped)
        output.tc.x = 1.0 - output.tc.x;

    return output;
}

float4 evaluate( float2 tc )
{
    // alpha 1 indicates biased texture
    float4 minmaxrms = tex1D(sTex, tc.x);
    minmaxrms.rgb -= 0.5 * minmaxrms.a;
    minmaxrms.rgb *= 1.0 + minmaxrms.a;
    float below = tc.y - minmaxrms.r;
    float above = tc.y - minmaxrms.g;
    float factor = min(abs(below), abs(above));
    bool outside = (below < 0 || above > 0);
    bool inside_rms = abs(tc.y) <= minmaxrms.b;

    float4 bgColor = backgroundColor;

    float4 wave = outside
        ? bgColor
        : lerp(bgColor, textColor, 2.0 * factor);

    return saturate(wave);
}

float4 drawBall(float2 tc, float2 center, float radius, float4 ballColor, float4 outsideColor) {
    float distFromCenter = distance(tc, center);
    float distFromEdge = radius - distFromCenter;
    float gradientX = ddx(distFromCenter);
    float gradientY = ddy(distFromCenter);
    float gradientLength = length(float2(gradientX, gradientY));
    float thresholdWidth = 2.0 * gradientLength;
    float insideCircle = saturate((distFromEdge / thresholdWidth) + 0.5);
    
    if (insideCircle > 0) {
        float z = sqrt(max(0.0, radius*radius - distFromCenter*distFromCenter));
        float3 surfacePos = {tc.x, tc.y, z};
        
	float lambda = atan((tc.x - center.x) / z);
	float phi = asin((tc.y - center.y) / radius);
        float2 ball_tc = float2((lambda / acos(0))/totalTime*15 + cursorPos, phi / acos(0)*2);
        float4 sampleColor = evaluate(ball_tc);
        
        float3 lightPos = float3(cursorPos * 4 - 2, 2-2*(cursorPos*2-1)*(cursorPos*2-1), 1) * 1000.0;
        
        float3 cameraPos = float3(0.0, 0.0, 1000.0);
        
        float3 vView = normalize(cameraPos - surfacePos);
        float3 vNormal = normalize(float3(tc.x - center.x, tc.y - center.y, z));
        float3 vLight = normalize(lightPos - surfacePos);
        float3 vReflection = 2 * dot(vLight, vNormal) * vNormal - vLight;
        
        float specular = pow(max(0, dot(vReflection, vView)), 100.0);
        float diffuse = 0.3 * max(0, dot(vLight, vNormal));
        float4 lightColor = float4(1.0, 1.0, 1.0, 1.0);
        float4 ambientColor = 0.7*float4(1, 1, 1, 1);
        
        float4 insideColor = ambientColor * sampleColor + diffuse * lightColor * sampleColor + specular * lightColor;
        return lerp(outsideColor, insideColor, insideCircle);
    } else {
        return outsideColor;
    }
}

float4 evaluateMinMaxRMS(float relativeTime) {
     // alpha 1 indicates biased texture
    float4 minmaxrms = tex1D(sTex, relativeTime);
    minmaxrms.rgb -= 0.5 * minmaxrms.a;
    minmaxrms.rgb *= 1.0 + minmaxrms.a;
    return minmaxrms;
}

float evaluateHeight(float2 tc) {
    float aspectRatio = viewportSize.x / viewportSize.y;
    tc.x = (tc.x / aspectRatio + 1) / 2;
    tc.x = tc.x * 15 / totalTime + cursorPos;
    
    float4 minmaxrms = evaluateMinMaxRMS(tc.x);

    float below = tc.y - minmaxrms.r;
    float above = tc.y - minmaxrms.g;
    float factor = min(abs(below), abs(above));
        
    float height = min(smoothstep(minmaxrms.r, -minmaxrms.b, tc.y), smoothstep(minmaxrms.g, minmaxrms.b, tc.y));

    return saturate(height);
}

float4 drawShadedWaveform(float2 tc, float heightScale, float3 cameraPos, float3 lightPos, float4 fg, float4 hl, float4 bg) {
    float height = evaluateHeight(tc);
    float scaledHeight = height * heightScale;
    
    float3 surfacePos = float3(tc.x, tc.y, 0.0);

    float3 vNormal = normalize(float3(ddx(scaledHeight), ddy(scaledHeight), 1.0));
    float3 vLight = normalize(lightPos - surfacePos);
    float3 vView = normalize(cameraPos - surfacePos);
    float3 vReflection = 2 * dot(vLight, vNormal) * vNormal - vLight;
    float alpha = 1000.0;
    
    float kDiff = max(0, dot(vNormal, vLight));
    float kSpec = pow(max(0, dot(vReflection, vView)), alpha);
    
    float4 surfaceColor = lerp(bg, fg, height);
    float4 ambientColor = 0.3 * surfaceColor;
    float4 diffuseColor = 0.7 * kDiff * hl;
    float4 specularColor = 1.0 * kSpec * hl;
        
    return saturate(ambientColor + diffuseColor + specularColor);
}

float4 PS( PS_IN input ) : SV_Target
{
    // fiddle with these to your hearts desire
    float cameraDistance = 1000.0;
    float lightDistance = 4.0;
    float highlightY = 0.0;
    float waveformHeight = -1.0; // positve embossed, negative etched
    
    // only fiddle with the rest if you know what you're doing.

    float aspectRatio = viewportSize.x / viewportSize.y;
    
    float2 tc = input.tc;
    
    float3 cameraPos = float3(0.0, 0.0, 1.0) * cameraDistance;

    float3 hightlightPos = float3((cursorPos * 2 - 1) * aspectRatio, highlightY, 0.0);
    float3 vNormal = float3(0.0, 0.0, 1.0);
    float3 vView = normalize(cameraPos - hightlightPos);
    float3 vReflection = 2 * dot(vView, vNormal) * vNormal - vView;

    float3 lightPos = hightlightPos + vReflection * lightDistance;
    
    float4 c0 = backgroundColor;
    
    c0 = drawShadedWaveform(tc, waveformHeight, cameraPos, lightPos, textColor, selectionColor, backgroundColor);
 
    return c0;
}

technique Render9
{
    pass
    {
        VertexShader = compile vs_3_0 VS();
        PixelShader = compile ps_3_0 PS();
    }
}